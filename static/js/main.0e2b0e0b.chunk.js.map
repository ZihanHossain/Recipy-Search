{"version":3,"sources":["Recipy.js","App.js","serviceWorker.js","index.js"],"names":["Recipy","title","calories","image","ingredients","class","className","src","alt","map","ingredient","text","App","useState","resipies","setRecipies","search","setSearch","query","setQuery","useEffect","getRecipy","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAIe,SAASA,EAAT,GAAuD,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YAClD,OACI,6BAASC,MAAM,6BACX,6BACI,4BAAKJ,GACL,yBAAKK,UAAY,mBAAmBC,IAAOJ,EAAOK,IAAM,KACxD,wCAAcN,GACd,2BACKE,EAAYK,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,YCyCzBC,MAjDf,WAEE,IAFa,EAKmBC,mBAAS,IAL5B,mBAKNC,EALM,KAKIC,EALJ,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,IAPtB,mBAONK,EAPM,KAOCC,EAPD,KASbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUE,cACVM,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBX,EAAYW,EAAKC,MACjBC,QAAQC,IAAIH,EAAKC,MAND,2CAAH,qDAkBf,OACE,yBAAKrB,UAAU,OACb,0BAAMwB,SAXQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,IASsBV,UAAY,uBACvC,2BAAO2B,KAAO,OAAO3B,UAAY,6CAA6C4B,MAASlB,EAAQmB,SAPhF,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAOf,4BAAQD,KAAO,SAAS3B,UAAY,gFAApC,WAEDQ,EAASL,KAAI,SAAA4B,GAAM,OAClB,kBAACrC,EAAD,CAAQsC,IAAOD,EAAOA,OAAOE,MAC7BtC,MAASoC,EAAOA,OAAOE,MACvBrC,SAAYmC,EAAOA,OAAOnC,SAC1BC,MAASkC,EAAOA,OAAOlC,MACvBC,YAAeiC,EAAOA,OAAOjC,mBCnCjBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.0e2b0e0b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\nimport 'tachyons'\r\n\r\nexport default function Recipy( {title,calories,image,ingredients} ) {\r\n    return (\r\n        <article class=\"br2 shadow-3 tc centerrec\">\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <img className = 'br-100 h3 w3 dib' src = {image} alt = ''></img>\r\n                <p>Calories: {calories}</p>\r\n                <p>\r\n                    {ingredients.map(ingredient =>(\r\n                        <li>{ingredient.text}</li>\r\n                    ))}\r\n                </p>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n","import React,{ useEffect,useState } from 'react';\nimport Recipy from './Recipy';\nimport './App.css';\nimport 'tachyons';\n\nfunction App() {\n\n  const APP_ID = '76700041';\n  const APP_KEY = '14234a365adcd98a9dc2ef2ce04b6b1e';\n\n  const [resipies, setRecipies] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getRecipy();\n  }, [query]);\n\n  const getRecipy = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipies(data.hits);\n    console.log(data.hits)\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit = {getSearch} className = 'pa4 black-80 center'>\n        <input type = 'text' className = 'input-reset ba b--black-20 pa3 mb2 db w-80' value = {search} onChange = {updateSearch}></input>\n        <button type = 'submit' className = 'w-30 pa3 mb2 b ph3 pv2 input-reset ba white bg-dark-gray grow pointer f6 dib'>Search</button>\n      </form>\n      {resipies.map(recipe => (\n        <Recipy key = {recipe.recipe.label} \n        title = {recipe.recipe.label} \n        calories = {recipe.recipe.calories} \n        image = {recipe.recipe.image}\n        ingredients = {recipe.recipe.ingredients}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}